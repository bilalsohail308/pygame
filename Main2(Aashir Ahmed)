import pygame
import math
import random
import os
from pygame import mixer

# Initialize Pygame
pygame.init()

# Global variables
width, height = 1100, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption('Ghoul Dash')

# Loading player images
image1=pygame.image.load(os.path.join('APS_Game','ghoul1.png'))
image2=pygame.image.load(os.path.join('APS_Game','ghoul2.png'))
frame1 = pygame.transform.scale(image1, (150, 150))
frame2 = pygame.transform.scale(image2, (150, 150))
player_images = [frame1, frame2]

# Loading obstacle images
SMALL_CACTUS = [pygame.image.load(os.path.join("APS_Game", "SmallCactus1.png")),
                pygame.image.load(os.path.join("APS_Game", "SmallCactus2.png")),
                pygame.image.load(os.path.join("APS_Game", "SmallCactus3.png"))]
LARGE_CACTUS = [pygame.image.load(os.path.join("APS_Game", "LargeCactus1.png")),
                pygame.image.load(os.path.join("APS_Game", "LargeCactus2.png")),
                pygame.image.load(os.path.join("APS_Game", "LargeCactus3.png"))]

# Load 5 bird frames
BIRD_FRAMES = [pygame.image.load(os.path.join("APS_Game", f"Bird{i}.png")) for i in range(1, 3)]

# Background image
bg_image = pygame.image.load(os.path.join('APS_Game','BG_C.png'))
bg_scaled = pygame.transform.scale(bg_image, (width, height))
bg_img_width = bg_scaled.get_width()
scroll_speed = 10
num_tiles = math.ceil(width / bg_img_width) + 1

# Player variables
player_x_pos, player_y_pos = 100, 320
player_jump_vel = 8.5
player_jump = False
player_current_image = 0
player_frame_counter = 0
player_frame_speed = 5

# Jump variables
jump_count = 0

# Game variables
obstacles = []
game_speed = 20
points = 0
high_score = 0
# Function definitions
def get_initial_player_y_pos():  # Function that returns original Y-coordinates of player 
    return 320

def Sound_Effect():   # Creating a function to play jump sound effect 
    mixer.init()
    mixer.music.load(os.path.join('APS_Game','Jump_sound.mp3')) 
    mixer.music.set_volume(0.5)
    mixer.music.play()


def draw_player():         # Function to draw player onto the screen
    global player_x_pos, player_y_pos, player_current_image, player_images
    player_image = player_images[player_current_image]
    screen.blit(player_image, (player_x_pos, player_y_pos))

def change_player_image(): # Function for changing the frames of the player sprite to make running animation 
    global player_current_image, player_frame_counter, player_images
    player_frame_counter += 1
    if player_frame_counter >= player_frame_speed:
        player_frame_counter = 0
        player_current_image = (player_current_image + 1) % len(player_images)

def score(): # Function for calculating score 
    global points, game_speed, high_score  # Add high_score to the global statement
    points += 1
    if points % 100 == 0:  # Increase speed every 100 points
        game_speed +=1

    if points > high_score:  # Update high score if current points are higher
        high_score = points

    font = pygame.font.Font('freesansbold.ttf', 20)
    text = font.render("Score: " + str(points), True, (255, 255, 255))
    textRect = text.get_rect()
    textRect.center = (1000, 40)
    screen.blit(text, textRect)

    # Display high score
    high_score_text = font.render("High Score: " + str(high_score), True, (255, 255, 255))
    high_score_rect = high_score_text.get_rect()
    high_score_rect.center = (1000, 70)  # Adjust position as needed
    screen.blit(high_score_text, high_score_rect)

def handle_input():              # Function for checking key input 
    global player_jump, jump_count
    key = pygame.key.get_pressed()
    if key[pygame.K_SPACE] and not player_jump:   # If space is pressed sound effect is played and values are changed to make player jump
        Sound_Effect()
        player_jump = True
        jump_count = 25

def update_game_logic():
    global player_jump, jump_count, player_y_pos
    if player_jump:
        if jump_count <= 0:
            player_jump = False
            set_player_y_pos(get_initial_player_y_pos())
        else:
            new_y = calculate_jump_height(jump_count)
            set_player_y_pos(new_y)
            jump_count -= 1
    change_player_image()
    update_obstacles()

def calculate_jump_height(jump_count):  # Function for calculating the jump height 
    a = -250 / 156.25
    return get_initial_player_y_pos() - ((a * jump_count * jump_count) - (25 * a * jump_count))

def set_player_y_pos(y_pos): # Sets the player's new Y-coordinates 
    global player_y_pos
    player_y_pos = y_pos

def update_obstacles():      # Updates the obstacles 
    global obstacles, game_speed
    for obstacle in obstacles:
        obstacle['x'] -= game_speed
        if obstacle['x'] < -obstacle['image'].get_width():
            obstacles.remove(obstacle)
       
def draw_obstacles():       # Function to draw obstacles onto the screen 
    for obstacle in obstacles:
        if 'frame' in obstacle:  # Check if obstacle is a bird
            # Change the image every 5 frames
            frame_index = (obstacle['frame'] // 5) % 2  # Cycles between 0 and 1 every 5 frames
            obstacle['image'] = BIRD_FRAMES[frame_index]
            obstacle['frame'] += 1

        screen.blit(obstacle['image'], (obstacle['x'], obstacle['y']))


def check_collision():  # Function that checks for collision 
    global player_x_pos, player_y_pos, player_images
    player_rect = pygame.Rect(player_x_pos, player_y_pos, player_images[0].get_width(), player_images[0].get_height())

    for obstacle in obstacles:
        obstacle_rect = pygame.Rect(obstacle['x'], obstacle['y'], obstacle['image'].get_width(), obstacle['image'].get_height())
        if player_rect.colliderect(obstacle_rect):
            return True
    return False

def create_obstacle(type): # Creating obstacles using dictionaries 
    global obstacles
    if type == "small_cactus":
        obstacle = {'image': random.choice(SMALL_CACTUS), 'x': width, 'y': 380}
    elif type == "large_cactus":
        obstacle = {'image': random.choice(LARGE_CACTUS), 'x': width, 'y': 380}
    elif type == "bird":
        obstacle = {'image': BIRD_FRAMES[0], 'x': width, 'y': 300, 'frame': 0}
    
    obstacles.append(obstacle)

def add_new_obstacle():    # Function for adding a new obstacle
    obstacle_type = random.choice(["small_cactus", "large_cactus", "bird"])
    create_obstacle(obstacle_type)

def reset_game():    # Function fo resetting the game after collision occurs 
    global points, game_speed, obstacles, player_y_pos, player_jump, jump_count
    points = 0
    game_speed = 20  # Initial game speed
    obstacles = []
    player_y_pos = get_initial_player_y_pos()
    player_jump = False
    jump_count = 0

def game_over_menu():   # Displays the game over menu 
    global high_score, points
    run = True
    font = pygame.font.Font('freesansbold.ttf', 30)

    # Define button dimensions and positions
    button_width, button_height = 200, 50
    quit_button_rect = pygame.Rect(width // 2 - 100, height // 2, button_width, button_height)
    restart_button_rect = pygame.Rect(width // 2 - 100, height // 2 + 60, button_width, button_height)

    while run:
        screen.fill((0, 100, 100))

        # Display high score and current score
        high_score_text = font.render(f"High Score: {high_score}", True, (0, 0, 0))
        current_score_text = font.render(f"Your Score: {points}", True, (0, 0, 0))
        screen.blit(high_score_text, (width // 2 - 118, height // 2 - 120))
        screen.blit(current_score_text, (width // 2 - 118, height // 2 - 80))

        # Draw buttons
        pygame.draw.rect(screen, (0, 0, 0), quit_button_rect, 2)
        pygame.draw.rect(screen, (0, 0, 0), restart_button_rect, 2)
        quit_text = font.render("Quit", True, (0, 0, 0))
        restart_text = font.render("Restart", True, (0, 0, 0))
        screen.blit(quit_text, (quit_button_rect.x + 70, quit_button_rect.y + 10))
        screen.blit(restart_text, (restart_button_rect.x + 60, restart_button_rect.y + 10))

        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()
                return
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = event.pos
                if quit_button_rect.collidepoint(mouse_pos):
                    pygame.quit()
                    return
                if restart_button_rect.collidepoint(mouse_pos):
                    reset_game()  # Reset the game state
                    main()  # Restart the game
                    return
                
def Move_BG():   # Moves the background infinitely 
    global scroll_speed
    for tile in range(num_tiles):
        x_position = (tile * bg_img_width) - (scroll_speed % bg_img_width)
        screen.blit(bg_scaled, (x_position, 0))
    scroll_speed += 8

def menu(death_count):  # The menu screen 
    global points, high_score
    run = True
    font = pygame.font.Font('freesansbold.ttf', 30)

    while run:
        screen.fill((0, 100, 100))

        # Display start/restart message
        if death_count == 0:
            text = font.render("Press any Key to Start", True, (0, 0, 0))
        else:
            text = font.render("Press any Key to Restart", True, (0, 0, 0))
            # Display current score
            score_text = font.render("Your Score: " + str(points), True, (0, 0, 0))
            scoreRect = score_text.get_rect()
            scoreRect.center = (width // 2, height // 2 + 50)
            screen.blit(score_text, scoreRect)

        textRect = text.get_rect()
        textRect.center = (width // 2, height // 2)
        screen.blit(text, textRect)

        # Display high score
        high_score_text = font.render("High Score: " + str(high_score), True, (0, 0, 0))
        high_score_rect = high_score_text.get_rect()
        high_score_rect.center = (width // 2, height // 2 + 50)
        screen.blit(high_score_text, high_score_rect)

        # Display player image and title of game
       
        screen.blit(player_images[0], (width // 2 - 70, height // 2-150))
        
        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.KEYDOWN:
                main()


# Main game loop with all helper functions called to create the game 

def main():
    global points, death_count, run, obstacles, game_speed, obstacles
    points = 0
    death_count = 0
    run = True
    clock = pygame.time.Clock()
    obstacle_timer = 1500  # Time interval between new obstacles

    while run:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit()

        handle_input()
        update_game_logic()

        obstacle_timer -= game_speed
        if obstacle_timer <= 0:
            add_new_obstacle()
            obstacle_timer = 1500

        screen.fill((50, 100, 160))
        Move_BG()   
        draw_player()
        draw_obstacles()
        score()

        if check_collision():
            game_over_menu()  # Call the game over menu
            break# Exit the loop if collision occurs

        clock.tick(30)
        pygame.display.update()

    # Game over logic or return to menu can be added here
    menu(death_count)

# Start the game
menu(0)
pygame.quit()
